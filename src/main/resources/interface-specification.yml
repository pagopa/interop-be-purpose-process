openapi: 3.0.3
info:
  title: Purpose Process Micro Service
  description: Offers operations to retrieve purpose data
  version: '{{version}}'
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: '/pdnd-interop-uservice-purpose-process/{{version}}'
    description: This service is the purpose process
security:
  - bearerAuth: [ ]
tags:
  - name: purpose
    description: Implements purpose process
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /purposes:
    get:
      tags:
        - purpose
      operationId: getPurposes
      description: Retrieve Purposes
      parameters:
        - in: query
          name: eserviceId
          schema:
            type: string
            format: uuid
        - in: query
          name: consumerId
          schema:
            type: string
            format: uuid
        - in: query
          name: states
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PurposeVersionState'
            default: [ ]
          explode: false
      responses:
        '200':
          description: Purposes requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purposes'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - purpose
      operationId: createPurpose
      description: Creates the Purpose
      responses:
        '201':
          description: Purpose created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purpose'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurposeSeed'
        required: true
  /purposes/{id}:
    parameters:
      - name: id
        in: path
        description: the purpose id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - purpose
      operationId: getPurpose
      description: Retrieve the Purpose
      responses:
        '200':
          description: Purpose requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purpose'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - purpose
      operationId: updatePurpose
      description: Updates a Purpose if not yet activated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurposeUpdateContent'
        required: true
      responses:
        '200':
          description: Purpose updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purpose'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /purposes/{purposeId}/versions:
    parameters:
      - name: purposeId
        in: path
        description: the purpose id
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - purpose
      operationId: createPurposeVersion
      description: Creates a draft Purpose Version
      responses:
        '201':
          description: Purpose created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeVersion'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurposeVersionSeed'
        required: true
  /status:
    get:
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /purposes/{purposeId}/versions/{versionId}/activate:
    parameters:
      - name: purposeId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
      - name: versionId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
    post:
      summary: Activate Purpose Version
      operationId: activatePurposeVersion
      responses:
        '200':
          description: Purpose Version Activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeVersion'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - purpose
      description: activates the purpose version by id
  /purposes/{purposeId}/versions/{versionId}/suspend:
    parameters:
      - name: purposeId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
      - name: versionId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
    post:
      summary: Suspend Purpose Version
      operationId: suspendPurposeVersion
      responses:
        '200':
          description: Purpose Version Suspended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeVersion'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - purpose
      description: suspends the purpose version by id
  /purposes/{purposeId}/versions/{versionId}/archive:
    parameters:
      - name: purposeId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
      - name: versionId
        in: path
        required:
          true
        schema:
          type: string
          format: uuid
    post:
      summary: Archive Purpose Version
      operationId: archivePurposeVersion
      responses:
        '200':
          description: Purpose Version Archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeVersion'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - purpose
      description: archives the purpose version by id
components:
  schemas:
    Purpose:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eserviceId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        versions:
          type: array
          items:
            $ref: '#/components/schemas/PurposeVersion'
        suspendedByConsumer:
          type: boolean
        suspendedByProducer:
          type: boolean
        title:
          type: string
        riskAnalysisForm:
          $ref: '#/components/schemas/RiskAnalysisForm'
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - eserviceId
        - consumerId
        - versions
        - title
        - description
        - createdAt
      description: business representation of a purpose
    Purposes:
      type: object
      properties:
        purposes:
          type: array
          items:
            $ref: '#/components/schemas/Purpose'
      required:
        - purposes
    PurposeUpdateContent:
      type: object
      description: contains the expected payload for purpose update.
      properties:
        title:
          type: string
        description:
          type: string
        riskAnalysisForm:
          $ref: '#/components/schemas/RiskAnalysisForm'
      required:
        - title
        - description
    PurposeVersion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/PurposeVersionState'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        firstActivationAt:
          type: string
          format: date-time
        expectedApprovalDate:
          type: string
          format: date-time
        riskAnalysis:
          $ref: '#/components/schemas/PurposeVersionDocument'
      required:
        - id
        - state
        - createdAt
      description: business representation of a purpose version
    PurposeVersionState:
      type: string
      description: Purpose State
      enum:
        - ACTIVE
        - DRAFT
        - SUSPENDED
        - WAITING_FOR_APPROVAL
        - ARCHIVED
    PurposeVersionDocument:
      type: object
      required:
        - id
        - contentType
        - path
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        contentType:
          type: string
        createdAt:
          type: string
          format: date-time
    PurposeSeed:
      type: object
      description: contains the expected payload for purpose creation.
      properties:
        eserviceId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        riskAnalysisForm:
          $ref: '#/components/schemas/RiskAnalysisForm'
        title:
          type: string
        description:
          type: string
      required:
        - eserviceId
        - consumerId
        - title
        - description
    PurposeVersionSeed:
      type: object
      description: contains the expected payload for purpose version creation.
      required:
        - dailyCalls
      properties:
        dailyCalls:
          description: 'maximum number of daily calls that this version can perform.'
          type: integer
          format: int32
          minimum: 0
    RiskAnalysisForm:
      type: object
      properties:
        version:
          type: string
        answers:
          $ref: '#/components/schemas/RiskAnalysisFormAnswers'
      required:
        - version
        - answers
    RiskAnalysisFormAnswers:
      type: object
      properties:
        purpose:
          $ref: '#/components/schemas/RiskAnalysisFormTextAnswer'
        usesPersonalData:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        usesThirdPartyPersonalData:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        usesConfidentialData:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        securedDataAccess:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        legalBasis:
          type: array
          items:
            $ref: '#/components/schemas/FormLegalBasisAnswers'
        legalObligationReference:
          $ref: '#/components/schemas/RiskAnalysisFormTextAnswer'
        publicInterestReference:
          $ref: '#/components/schemas/RiskAnalysisFormTextAnswer'
        knowsAccessedDataCategories:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        accessDataArt9Gdpr:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        accessUnderageData:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        knowsDataQuantity:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        dataQuantity:
          $ref: '#/components/schemas/FormDataQuantityAnswers'
        deliveryMethod:
          $ref: '#/components/schemas/FormDeliveryMethodAnswers'
        doneDpia:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        definedDataRetentionPeriod:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        purposePursuit:
          $ref: '#/components/schemas/FormPurposePursuitAnswers'
        checkedExistenceMereCorrectnessInteropCatalogue:
          type: array
          items:
            $ref: '#/components/schemas/RiskAnalysisFormYesAnswer'
        checkedAllDataNeeded:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
        checkedExistenceMinimalDataInteropCatalogue:
          $ref: '#/components/schemas/RiskAnalysisFormYesNoAnswer'
      required:
        - purpose
        - usesPersonalData
    RiskAnalysisFormTextAnswer:
      type: string
    RiskAnalysisFormYesNoAnswer:
      type: string
      enum:
        - 'YES'
        - 'NO'
    RiskAnalysisFormYesAnswer:
      type: string
      enum:
        - 'YES'
    FormLegalBasisAnswers:
      type: string
      enum:
        - CONSENT
        - CONTRACT
        - LEGAL_OBLIGATION
        - SAFEGUARD
        - PUBLIC_INTEREST
        - LEGITIMATE_INTEREST
    FormDataQuantityAnswers:
      type: string
      enum:
        - QUANTITY_0_TO_100
        - QUANTITY_101_TO_500
        - QUANTITY_500_TO_1000
        - QUANTITY_1001_TO_5000
        - QUANTITY_5001_OVER
    FormDeliveryMethodAnswers:
      type: string
      enum:
        - CLEARTEXT
        - AGGREGATE
        - ANONYMOUS
        - PSEUDOANONYMOUS
    FormPurposePursuitAnswers:
      type: string
      enum:
        - MERE_CORRECTNESS
        - NEW_PERSONAL_DATA
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: 'A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).'
      scheme: bearer
      bearerFormat: JWT