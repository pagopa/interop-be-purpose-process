akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  management {
    http {
      hostname = "0.0.0.0"
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.purposeprocess.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.purposeprocess.server.impl.LiveCheck"
      }
    }
  }
}

purpose-process {
  port = 8088
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }
  storage {
    kind = "file"
    container = "container"
    risk-analysis-path = "target/risk-analysis/docs"
  }
  services {
    authorization-management      = "http://localhost:8086/authorization-management/0.1"
    purpose-management            = "http://localhost:8089/purpose-management/0.1"
  }

  read-model {
    db {
      name = ${READ_MODEL_DB_NAME}
      connection-string = "mongodb://"${READ_MODEL_DB_USER}":"${READ_MODEL_DB_PASSWORD}"@"${READ_MODEL_DB_HOST}":"${READ_MODEL_DB_PORT}"/"${READ_MODEL_DB_NAME}"?directConnection=true&serverSelectionTimeoutMS=2000"
    }
  }
}

interop-commons {
  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }

  storage {
    type = "File"
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size-min = 4
} 